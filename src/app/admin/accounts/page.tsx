'use client'

import { useState, useEffect } from 'react'
import { useRouter } from 'next/navigation'
import { useAuth } from '@/contexts/AuthContext'
import { useFamilyContext } from '@/contexts/FamilyContext'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table'
import { motion, AnimatePresence } from 'framer-motion'
import { Users, Heart, Edit2, Trash2 } from 'lucide-react'
import EditAccountDialog from '@/components/EditAccountDialog'
import { ConfirmDialog } from "@/components/ui/confirm-dialog"
import { Button } from "@/components/ui/button"
import { useToast } from "@/components/ui/use-toast"

type GeneratedAccount = {
  email: string;
  password: string;
  accessibleFamilies: string[];
  isMinor: boolean;
}

export default function AdminAccountsPage() {
  const [accounts, setAccounts] = useState<GeneratedAccount[]>([])
  const [isLoading, setIsLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)
  const router = useRouter()
  const { user, getGeneratedAccounts, editAccount, deleteAccount } = useAuth()
  const { families } = useFamilyContext()
  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false)
  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false)
  const [selectedAccount, setSelectedAccount] = useState<GeneratedAccount | null>(null)
  const { toast } = useToast()

  useEffect(() => {
    const loadAccounts = async () => {
      if (!user?.isAdmin) {
        router.push('/login')
        return
      }

      try {
        const fetchedAccounts = await getGeneratedAccounts()
        if (Array.isArray(fetchedAccounts)) {
          setAccounts(fetchedAccounts)
        } else {
          console.error('Fetched accounts is not an array:', fetchedAccounts)
          setAccounts([])
        }
      } catch (err) {
        console.error('Error fetching accounts:', err)
        setError('Failed to load accounts. Please try again.')
      } finally {
        setIsLoading(false)
      }
    }

    loadAccounts()
  }, [user, router, getGeneratedAccounts])

  if (!user?.isAdmin) {
    return null
  }

  if (isLoading) {
    return <div>Loading...</div>
  }

  if (error) {
    return <div>Error: {error}</div>
  }

  const handleEdit = async (email: string, updates: Partial<GeneratedAccount>) => {
    try {
      await editAccount(email, updates)
      toast({
        title: "Account Updated",
        description: "The account has been successfully updated.",
        duration: 3000,
      })
    } catch (error) {
      toast({
        title: "Update Failed",
        description: "Failed to update the account. Please try again.",
        variant: "destructive",
        duration: 5000,
      })
    }
  }

  const handleDelete = async (email: string) => {
    try {
      await deleteAccount(email)
      toast({
        title: "Account Deleted",
        description: "The account has been successfully deleted.",
        duration: 3000,
      })
    } catch (error) {
      toast({
        title: "Delete Failed",
        description: "Failed to delete the account. Please try again.",
        variant: "destructive",
        duration: 5000,
      })
    }
  }

  return (
    <div className="min-h-screen bg-white p-4">
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5 }}
        className="w-full max-w-4xl mx-auto"
      >
        <Card className="border-pink-100 shadow-xl bg-white/95 backdrop-blur-sm">
          <CardHeader className="border-b border-pink-100">
            <CardTitle className="text-2xl font-bold text-center flex items-center justify-center gap-2">
              <Users className="h-6 w-6 text-pink-500" />
              Generated Accounts
              <Heart className="h-6 w-6 text-pink-500" />
            </CardTitle>
            <CardDescription className="text-center text-gray-600">
              View all user accounts generated by admin
            </CardDescription>
          </CardHeader>
          <CardContent className="p-6">
            <div className="rounded-lg overflow-hidden border border-pink-100">
              <Table>
                <TableHeader>
                  <TableRow className="bg-gradient-to-r from-pink-50 to-purple-50">
                    <TableHead className="font-semibold text-pink-700">Email</TableHead>
                    <TableHead className="font-semibold text-pink-700">Password</TableHead>
                    <TableHead className="font-semibold text-pink-700">Accessible Families</TableHead>
                    <TableHead className="font-semibold text-pink-700">Is Minor</TableHead>
                    <TableHead className="font-semibold text-pink-700">Actions</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {accounts.map((account, index) => (
                    <TableRow 
                      key={index}
                      className="hover:bg-pink-50/50 transition-colors duration-200"
                    >
                      <TableCell className="font-medium text-gray-700">{account.email}</TableCell>
                      <TableCell className="text-gray-700">{account.password}</TableCell>
                      <TableCell>
                        {account.accessibleFamilies.length > 0
                          ? account.accessibleFamilies.map(familyId => {
                              const family = families.find(f => f.id === familyId);
                              return family ? (
                                <span 
                                  key={familyId}
                                  className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-pink-100 text-pink-700 mr-2"
                                >
                                  {family.name}
                                </span>
                              ) : null;
                            })
                          : 'None'}
                      </TableCell>
                      <TableCell>
                        <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                          account.isMinor 
                            ? 'bg-pink-100 text-pink-700' 
                            : 'bg-purple-100 text-purple-700'
                        }`}>
                          {account.isMinor ? 'Yes' : 'No'}
                        </span>
                      </TableCell>
                      <TableCell>
                        <div className="flex gap-2">
                          <Button
                            variant="ghost"
                            size="icon"
                            onClick={() => {
                              setSelectedAccount(account)
                              setIsEditDialogOpen(true)
                            }}
                            className="text-pink-600 hover:text-pink-700 hover:bg-pink-50"
                          >
                            <Edit2 className="h-4 w-4" />
                          </Button>
                          <Button
                            variant="ghost"
                            size="icon"
                            onClick={() => {
                              setSelectedAccount(account)
                              setIsDeleteDialogOpen(true)
                            }}
                            className="text-red-600 hover:text-red-700 hover:bg-red-50"
                          >
                            <Trash2 className="h-4 w-4" />
                          </Button>
                        </div>
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </div>
          </CardContent>
        </Card>
      </motion.div>
      {selectedAccount && (
        <EditAccountDialog
          account={selectedAccount}
          isOpen={isEditDialogOpen}
          onClose={() => {
            setIsEditDialogOpen(false)
            setSelectedAccount(null)
          }}
          onSave={handleEdit}
        />
      )}

      <ConfirmDialog
        isOpen={isDeleteDialogOpen}
        onClose={() => {
          setIsDeleteDialogOpen(false)
          setSelectedAccount(null)
        }}
        onConfirm={() => {
          if (selectedAccount) {
            handleDelete(selectedAccount.email)
          }
          setIsDeleteDialogOpen(false)
          setSelectedAccount(null)
        }}
        title="Delete Account"
        description="Are you sure you want to delete this account? This action cannot be undone."
        confirmText="Delete"
        cancelText="Cancel"
      />
    </div>
  )
}
